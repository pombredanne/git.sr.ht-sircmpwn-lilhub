query FetchUserIndex($login: String!) {
  user(login: $login) {
    avatarUrl
    bio
    company
    location
    login
    name
    websiteUrl

    pinnedItems(first: 6) {
      nodes {
        __typename
        ... on Repository {
          ... RepositoryBadge
        }

        ... on Gist {
          description
          name
          url
        }
      }
    }

    repositories(
      first: 6,
      affiliations: [OWNER],
      orderBy: {
        field: STARGAZERS,
        direction: DESC,
      },
    ) {
      nodes {
        ... RepositoryBadge
      }
    }

    repository(name: $login) {
      object(expression: "HEAD:README.md") {
        ... TextFileObject
      }
    }
  }
}

query FetchRepoIndex($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    ... RepositoryHeader

    descriptionHTML
    sshUrl
    url

    primaryLanguage {
      color
      name
    }

    licenseInfo {
      name
      nickname
      spdxId
    }

    # Latest commit & tree
    object(expression:"HEAD") {
      __typename
      ... on Commit {
        abbreviatedOid
        oid
        messageHeadlineHTML

        author {
          avatarUrl(size: 24)
          date
          name

          user {
            login
          }
        }

        tree {
          ... TreeObject
        }
      }
    }
  }
}

# TODO: Merge into FetchRepoIndex
# https://todo.sr.ht/~emersion/gqlclient/1
query FetchREADME($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    object(expression:"HEAD:README.md") {
      ... TextFileObject
    }
  }
}

query FetchBlob($owner: String!, $name: String!, $ref: String!) {
  repository(owner: $owner, name: $name) {
    ... RepositoryHeader

    object(expression: $ref) {
      ... TextFileObject
    }
  }
}

query FetchTree($owner: String!, $name: String!, $ref: String!) {
  repository(owner: $owner, name: $name) {
    ... RepositoryHeader

    object(expression: $ref) {
      ... TreeObject
    }
  }
}

fragment RepositoryHeader on Repository {
    isArchived
    isDisabled
    name

    defaultBranchRef {
      name
    }

    owner {
      login
    }
}

fragment RepositoryBadge on Repository {
  description
  descriptionHTML
  isArchived
  name
  url

  primaryLanguage {
    color
    name
  }
}

fragment TreeObject on GitObject {
  __typename
  ... on Tree {
    entries {
      mode
      name
      path
      type
    }
  }
}

fragment TextFileObject on GitObject {
  __typename
  ... on Blob {
    text
  }
}
